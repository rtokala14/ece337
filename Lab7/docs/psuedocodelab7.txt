idle: if data_ready == 0 load_coeff == 0 goto idle;
	elseif: data_ready == 0 load_coeff == 1 goto load_coeff0;
	else: data_ready == 1 load_coeff == 0 goto store;

load_coeff0: if load_coeff == 1 goto loaded0;
loaded0: set modwait = 0;
load_coeff1: if load_coeff == 1 goto loaded1;
loaded1: set modwait = 0;
load_coeff2: if load_coeff == 1 goto loaded2;
loaded2: set modwait = 0;
load_coeff3: if load_coeff == 1 goto loaded3;
loaded3: set modwait = 0;


store: if data_ready == 0 goto eidle;
	reg[5] = data;
	err = 0;
zero: reg[0] = 0;
sort1: reg[1] = reg[2];
sort2: reg[2] = reg[3];
sort3: reg[3] = reg[4];
sort4: reg[4] = reg[5];

mul1: reg[10] = reg[1] * reg[6];
add1: reg[0] = reg[0] + reg[10];
	if (V) goto eidle;

mul2: reg[10] = reg[2] * reg[7];
sub1: reg[0] = reg[0] - reg[10];
	if (V) goto eidle;


mul3: reg[10] = reg[3] * reg[8];
add2: reg[0] = reg[0] + reg[10];
	if (V) goto eidle;

mul4: reg[10] = reg[4] * reg[9];
sub2: reg[0] = reg[0] - reg[10];
	if (V) goto eidle;
	else goto idle;

eidle:  err = 1;
if data_ready == 1   goto store;
// wait until data_ready=1
if data_ready == 0    goto eidle;
